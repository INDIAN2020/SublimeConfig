{
    /*
        Default python interpreter.

        This can (and should) be overridden by project settings
    */
    "python_interpreter": "python",

    /*
        Set those as true if you don't want Sublime Text regular completions
    */
    "suppress_word_completions": true,
    "suppress_explicit_completions": false,

    /*
        If complete_parameters is true, anaconda will add function and class
        parameters to its completions.

        If complete_all_parameters is true, it will add all the possible
        parameters, if it's false, it will add only required parameters
    */
    "complete_parameters": true,
    "complete_all_parameters": false,

    /*
        If you set the following option as true, anaconda will display the
        signatures of the methods you are using while typing
    */
    "display_signatures": true,

    /*
        Set is a false to disable Anaconda Linting totally
    */
    "anaconda_linting": true,

    /*
        If anaconda_gutter_marks is true, this determines what theme is used.
        Theme 'basic' only adds dots and circles to gutter.

        Other available themes are 'alpha', 'bright', 'dark', 'hard', "retina"
       (for retina displays) and 'simple'. To see icons that will be used for
        each theme check gutter_icon_themes folder in Anaconda package.
    */
    "anaconda_gutter_theme": "alpha",

    /*
        If 'outline' (default) anaconda will outline error lines
        If 'fill' anaconda will fill the lines
        If 'none' anaconda will not draw anything on error lines
    */
    "anaconda_linter_mark_style": "none",

    /*
        If anaconda_linter_mark_style is set to none and this is set to false,
        anaconda will not underline errors

        If anaconda_linter_mark_style is set to anything else, this option is
        ignored
    */
    "anaconda_linter_underlines": true,

    /*
        If anaconda_linter_show_errors_on_save is set to true, anaconda
        will show a list of errors when the user save the file

        This is disabled by default
    */
    "anaconda_linter_show_errors_on_save": false,

    /*
        Use PyLint instead of PyFlakes and PEP-8

        **** WARNING ****

        - If you set this value as true, PyFlakes and pep8 will not bet used
        - PyLint does *NOT* support lint buffers that are not already saved in
          the file system

        **** WARNING ****
    */
    "use_pylint": false,

    // Set this to false to turn pep8 checking off completely
    "pep8": true,

    /*
        If setted, the given file will be used as configuration for pep8

        **** WARNING ****

        - If this option is set to something different than false,
          pep8_ignore and pep8_max_line_length will be silently ignored

        **** WARNING ****
    */
    "pep8_rcfile": false,

    /*
        A list of pep8 error numbers to ignore.
        The list of error codes is in this file: https://github.com/jcrocholl/pep8/blob/master/pep8.py.
        Search for "Ennn:", where nnn is a 3-digit number.
    */
    "pep8_ignore":
    [ ],

    // Maximum line length for pep8
    "pep8_max_line_length": 150,

    /*
        You can override the level of PEP8 errors altering this mapping.
        WARNING: Be careful with this option, the only valid error level values
        are:

            * E for errors (reduced to Warning by default)
            * W for warnings (reduced to Violation by default)
            * V for convention violations

        If you set a value that is not listed here, anaconda will ignore your
        setting
    */
    "pep8_error_levels": {"E": "W", "W": "V", "V": "V"},

    // Set this to true to turn pep257 checking on
    "pep257": true,

    /*
        A list of pep257 error numbers to ignore.
        The list can be found here: https://github.com/GreenSteam/pep257/#error-codes
        D209 Multi-line docstring should end with 1 blank line is ignored by default as it has been deprecated.
    */
    "pep257_ignore":
    [
        "D209"
    ],

    /*
        Set the following option to true if you want that anaconda check
        the validity of your imports when the linting process is fired.

        WARNING: take into account that anaconda compiles and import the
        modules in the JsonServer memory segment in order to check this
    */
    "validate_imports": true,

    /*
        Debug and development options

        Use those options only for debugging and development purposes, they can
        and will slowdown your Sublime Text

        anconda_debug can be set as: false or profiler

        If this is set as profiler, Anaconda will run a profiler on autocomplete
        and print its results in the Sublime Text console.

        NOTE: cProfile can't be imported in all the platforms, at least not in
        Linux, this is an already reported bug:

            http://www.sublimetext.com/forum/viewtopic.php?f=3&t=13698
            https://github.com/SublimeText/Issues/issues/127

    */
    "anaconda_debug": false,
}
